package me.sevj6.pvp.listener.listeners.exploits;

import lombok.SneakyThrows;
import me.sevj6.pvp.util.Utils;
import me.txmc.protocolapi.PacketEvent;
import me.txmc.protocolapi.PacketListener;
import net.minecraft.server.v1_12_R1.PacketPlayInFlying;
import net.minecraft.server.v1_12_R1.PacketPlayInTeleportAccept;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;

public class PhaseRelatedPacketFly implements PacketListener {

    private final List<Material> safeBlocks = Arrays.asList(Material.SIGN, Material.SIGN_POST, Material.WALL_SIGN, Material.GOLD_PLATE,
            Material.IRON_PLATE, Material.WOOD_PLATE, Material.STONE_PLATE, Material.BED, Material.BED_BLOCK, Material.SKULL,
            Material.TRAP_DOOR, Material.FENCE, Material.FENCE_GATE, Material.IRON_FENCE, Material.COBBLE_WALL, Material.BANNER,
            Material.STANDING_BANNER, Material.WALL_BANNER, Material.WOODEN_DOOR, Material.WOOD_DOOR, Material.BIRCH_DOOR, Material.ACACIA_DOOR,
            Material.DARK_OAK_DOOR, Material.IRON_DOOR, Material.JUNGLE_DOOR, Material.SPRUCE_DOOR, Material.STAINED_GLASS_PANE, Material.THIN_GLASS,
            Material.FENCE, Material.IRON_FENCE, Material.BIRCH_FENCE, Material.ACACIA_FENCE, Material.DARK_OAK_FENCE, Material.JUNGLE_FENCE,
            Material.NETHER_FENCE, Material.SPRUCE_FENCE, Material.PISTON_EXTENSION, Material.PISTON_MOVING_PIECE, Material.PISTON_BASE);

    private final Field hasPos;
    private final Field xF;
    private final Field yF;
    private final Field zF;

    @SneakyThrows
    public PhaseRelatedPacketFly() {
        this.hasPos = PacketPlayInFlying.class.getDeclaredField("hasPos");
        this.hasPos.setAccessible(true);
        this.xF = PacketPlayInFlying.class.getDeclaredField("x");
        this.xF.setAccessible(true);
        this.yF = PacketPlayInFlying.class.getDeclaredField("y");
        this.yF.setAccessible(true);
        this.zF = PacketPlayInFlying.class.getDeclaredField("z");
        this.zF.setAccessible(true);
    }

    @Override
    public void incoming(PacketEvent.Incoming event) throws Throwable {
        if (checkChorus(event)) return;
        if (!(event.getPacket() instanceof PacketPlayInFlying)) return;
        PacketPlayInFlying packet = (PacketPlayInFlying) event.getPacket();
        Player player = event.getPlayer();
        Location playerLocation = player.getLocation();
        Location packetLocation = new Location(player.getWorld(), xF.getDouble(packet), yF.getDouble(packet), zF.getDouble(packet));
        if (playerLocation.getBlockX() != packetLocation.getBlockX() || playerLocation.getBlockZ() != packetLocation.getBlockZ()) {
            if (isIllegalLocation(packetLocation) || hasPos(packet) && getYDelta(packet, player) > 20.0D)
                Utils.cancelAndLagback(event);
        }
    }

    private boolean isIllegalLocation(Location packetLocation) {
        Block blockInFeet = packetLocation.getBlock();
        Block blockInHead = packetLocation.getBlock().getRelative(BlockFace.UP);
        double yHeight = packetLocation.getY();
        double blockY = packetLocation.getBlockY();
        return (blockInFeet.getType().isSolid() || blockInHead.getType().isSolid())
                && (yHeight - blockY == 0.0D || yHeight < 0.225)
                && (!safeBlocks.contains(blockInFeet.getType()) || !safeBlocks.contains(blockInHead.getType()));
    }

    @SneakyThrows
    private boolean hasPos(PacketPlayInFlying packet) {
        return hasPos.getBoolean(packet);
    }

    @SneakyThrows
    private double getYDelta(PacketPlayInFlying packet, Player player) {
        Location origin = player.getLocation();
        double originalY = origin.getY();
        double packetY = yF.getDouble(packet);
        return Math.abs(packetY - originalY);
    }

    private boolean checkChorus(PacketEvent.Incoming event) {
        if (event.getPacket() instanceof PacketPlayInTeleportAccept) {
            Player player = event.getPlayer();
            PlayerInventory inventory = player.getInventory();
            ItemStack item = (inventory.getItemInOffHand().getType() == Material.CHORUS_FRUIT) ? player.getEquipment().getItemInOffHand() : (inventory.getItemInMainHand().getType() == Material.CHORUS_FRUIT) ? player.getEquipment().getItemInMainHand() : null;
            return item != null;
        }
        return false;
    }

    @Override
    public void outgoing(PacketEvent.Outgoing outgoing) throws Throwable {

    }
}
